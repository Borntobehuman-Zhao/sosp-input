<?xml version="1.0" encoding="UTF-8"?>

<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <groupId>com.icss</groupId>
    <artifactId>sosp-input</artifactId>
    <version>1.0-SNAPSHOT</version>
    <packaging>war</packaging>

    <name>sosp-input Maven Webapp</name>
    <!-- FIXME change it to the project's website -->
    <url>http://www.example.com</url>

    <properties>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <maven.compiler.encoding>UTF-8</maven.compiler.encoding>
    </properties>

    <!-- 使用阿里 maven 库 -->
    <repositories>
        <repository>
            <id>ali-maven</id>
            <url>http://maven.aliyun.com/nexus/content/groups/public</url>
            <releases>
                <enabled>true</enabled>
            </releases>
            <snapshots>
                <enabled>true</enabled>
                <updatePolicy>always</updatePolicy>
                <checksumPolicy>fail</checksumPolicy>
            </snapshots>
        </repository>
    </repositories>

    <dependencies>

        <!-- jfinal -->
        <dependency>
            <groupId>com.jfinal</groupId>
            <artifactId>jfinal</artifactId>
            <version>4.9.08</version>
        </dependency>

        <!-- cos 文件上传 -->
        <dependency>
            <groupId>com.jfinal</groupId>
            <artifactId>cos</artifactId>
            <version>2020.4</version>
        </dependency>

        <!-- junit 单元测试 -->
        <dependency>
            <groupId>junit</groupId>
            <artifactId>junit</artifactId>
            <version>3.8.1</version>
            <scope>test</scope>
        </dependency>

        <!-- 避免控制台输出如下提示信息：
             SLF4J: Failed to load class "org.slf4j.impl.StaticLoggerBinder".
             项目中实际上用不到这个 jar 包，本 jfinal demo 用不上这个依赖，在此仅为大家
             在未来基于 jfinal demo 为模板做开发时做准备工作
             注意：eclipse 下可以将 scope 设置为 provided
        -->
        <dependency>
            <groupId>org.slf4j</groupId>
            <artifactId>slf4j-nop</artifactId>
            <version>1.7.29</version>
            <!-- 打包前改成 provided，此处使用 compile 仅为支持 IDEA -->
            <scope>compile</scope>
        </dependency>

        <!-- log4j 日志 -->
        <dependency>
            <groupId>log4j</groupId>
            <artifactId>log4j</artifactId>
            <version>1.2.17</version>
        </dependency>

        <!-- mysql 驱动 -->
        <!--    <dependency>-->
        <!--      <groupId>mysql</groupId>-->
        <!--      <artifactId>mysql-connector-java</artifactId>-->
        <!--      <version>5.1.44</version>-->
        <!--    </dependency>-->

        <dependency>
            <groupId>mysql</groupId>
            <artifactId>mysql-connector-java</artifactId>
            <version>8.0.22</version>
        </dependency>

        <!-- druid 数据源连接池 -->
        <dependency>
            <groupId>com.alibaba</groupId>
            <artifactId>druid</artifactId>
            <version>1.0.29</version>
        </dependency>

        <dependency>
            <groupId>javax.servlet</groupId>
            <artifactId>javax.servlet-api</artifactId>
            <version>3.0.1</version>
            <scope>provided</scope>
        </dependency>
        <dependency>
            <groupId>javax.servlet.jsp</groupId>
            <artifactId>jsp-api</artifactId>
            <version>2.2</version>
            <scope>provided</scope>
        </dependency>


        <dependency>
            <groupId>com.icss.sosp</groupId>
            <artifactId>ant</artifactId>
            <version>0.1</version>
            <scope>system</scope>
            <systemPath>${project.basedir}/lib/ant.jar</systemPath>
        </dependency>

        <dependency>
            <groupId>com.icss.sosp</groupId>
            <artifactId>batik-extension</artifactId>
            <version>0.1</version>
            <scope>system</scope>
            <systemPath>${project.basedir}/lib/batik-extension.jar</systemPath>
        </dependency>

        <dependency>
            <groupId>com.icss.sosp</groupId>
            <artifactId>batik-transcoder</artifactId>
            <version>0.2</version>
            <scope>system</scope>
            <systemPath>${project.basedir}/lib/batik-transcoder.jar</systemPath>
        </dependency>

        <dependency>
            <groupId>com.icss.sosp</groupId>
            <artifactId>commons-fileupload-1.3.3</artifactId>
            <version>0.2</version>
            <scope>system</scope>
            <systemPath>${project.basedir}/lib/commons-fileupload-1.3.3.jar</systemPath>
        </dependency>

        <dependency>
            <groupId>com.icss.sosp</groupId>
            <artifactId>dom4j-1.6.1</artifactId>
            <version>0.3</version>
            <scope>system</scope>
            <systemPath>${project.basedir}/lib/dom4j-1.6.1.jar</systemPath>
        </dependency>

        <dependency>
            <groupId>com.icss.sosp</groupId>
            <artifactId>httpcore-4.4.6</artifactId>
            <version>0.3</version>
            <scope>system</scope>
            <systemPath>${project.basedir}/lib/httpcore-4.4.6.jar</systemPath>
        </dependency>

        <dependency>
            <groupId>com.icss.sosp</groupId>
            <artifactId>json</artifactId>
            <version>0.4</version>
            <scope>system</scope>
            <systemPath>${project.basedir}/lib/json.jar</systemPath>
        </dependency>

        <dependency>
            <groupId>com.icss.sosp</groupId>
            <artifactId>poi-5.0.0</artifactId>
            <version>0.4</version>
            <scope>system</scope>
            <systemPath>${project.basedir}/lib/poi-5.0.0.jar</systemPath>
        </dependency>

        <dependency>
            <groupId>com.icss.sosp</groupId>
            <artifactId>quartz-2.1.6</artifactId>
            <version>0.5</version>
            <scope>system</scope>
            <systemPath>${project.basedir}/lib/quartz-2.1.6.jar</systemPath>
        </dependency>

        <dependency>
            <groupId>com.icss.sosp</groupId>
            <artifactId>substance-7.2.1</artifactId>
            <version>0.5</version>
            <scope>system</scope>
            <systemPath>${project.basedir}/lib/substance-7.2.1.jar</systemPath>
        </dependency>

        <dependency>
            <groupId>com.icss.sosp</groupId>
            <artifactId>xmlsec-2.2.1</artifactId>
            <version>0.6</version>
            <scope>system</scope>
            <systemPath>${project.basedir}/lib/xmlsec-2.2.1.jar</systemPath>
        </dependency>


    </dependencies>

    <build>


        <!--
            添加 includes 配置后，excludes 默认为所有文件 **/*.*，反之亦然
            该规则在 maven-jar-plugin 等插件中同样适用
        -->
        <resources>
            <!-- 添加该配置是为了将 .sql 文件打入 jar 包 -->
            <resource>
                <directory>src/main/java</directory>
                <includes>
                    <!-- **/* 前缀用法，可以匹配所有路径 -->
                    <include>**/*.sql</include>
                </includes>
            </resource>

            <!--
                没有添加 resources 配置时，src/main/resources 目录是默认配置
                一旦添加 resources 配置指向 src/main/java 目录时，原先的默认配置被取代，
                所以需要添加如下配置将默认配置再添加进来，否则无法使用 src/main/resources
                下的资源文件
            -->
            <resource>
                <directory>src/main/resources</directory>
            </resource>
        </resources>


        <plugins>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
                <version>3.6.1</version>
                <configuration>
                    <source>1.8</source>
                    <target>1.8</target>
                    <encoding>UTF-8</encoding>
                    <!-- java8 保留参数名编译参数 -->
                    <compilerArgument>-parameters</compilerArgument>
                    <compilerArguments>
                        <verbose/>
                    </compilerArguments>
                </configuration>
            </plugin>

            <!-- 打包本地jar -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-war-plugin</artifactId>
                <configuration>
                    <webResources>
                        <resource>
                            <directory>${project.basedir}/lib</directory>
                            <targetPath>WEB-INF/lib/</targetPath>
                            <includes>
                                <include>**/*.jar</include>
                            </includes>
                        </resource>
                    </webResources>
                </configuration>
            </plugin>

            <!--
                jar 包中的配置文件优先级高于 config 目录下的 "同名文件"
                因此，打包时需要排除掉 jar 包中来自 src/main/resources 目录的
                配置文件，否则部署时 config 目录中的同名配置文件不会生效
             -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-jar-plugin</artifactId>
                <version>2.6</version>
                <configuration>
                    <excludes>
                        <!--
                             *.* 用法，可以匹配 jar 包根目录下所有文件
                             *.xxx 用法，可以匹配 jar 包根目录下特定扩展名文件，例如：*.xml
                             **/* 前缀用法，可以匹配所有路径，例如：**/*.txt
                        -->
                        <exclude>*.*</exclude>
                    </excludes>
                </configuration>
            </plugin>
        </plugins>
        <finalName>sosp-input</finalName>
    </build>

</project>
